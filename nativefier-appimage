#!/usr/bin/env bash

#############################################################################################################################################################################
#   The license used for this file and its contents is: BSD-3-Clause                                                                                                        #
#                                                                                                                                                                           #
#   Copyright <2020> <Anupam Basak <anupam.basak27@nxos.org>>                                                                                                               #
#   Copyright <2023> <Uri Herrera <uri_herrera@nxos.org>>                                                                                                                   #
#                                                                                                                                                                           #
#   Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:                          #
#                                                                                                                                                                           #
#    1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.                                        #
#                                                                                                                                                                           #
#    2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer                                      #
#       in the documentation and/or other materials provided with the distribution.                                                                                         #
#                                                                                                                                                                           #
#    3. Neither the name of the copyright holder nor the names of its contributors may be used to endorse or promote products derived from this software                    #
#       without specific prior written permission.                                                                                                                          #
#                                                                                                                                                                           #
#    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,                      #
#    THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS                  #
#    BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE                 #
#    GOODS OR SERVICES; LOSS OF USE, DATA,   OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,                      #
#    STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.   #
#############################################################################################################################################################################

set -euo pipefail


# -- Function to display help text.

show_help() {
  cat << EOF
Usage: ${0##*/} [-h] [-v] --name <name> --url <url> --icon <icon> [--extra <extra_nativefier_options>]

  -h, --help      Display this help and exit
  -v, --version   Output version information and exit
  --name          Name of the application
  --url           URL of the webpage to package
  --icon          Icon of the appimage
  --extra         Extra nativefier options
EOF
}


# -- Function to print version.

show_version() {
  echo "nativefier-appimage version 1.0"
}


# -- Function to print error messages.

print_error() {
  echo "Error: $1" >&2
  exit 1
}


# -- URL and Path validation Ffunction.

validate_url() {
  local url="$1"
  if ! [[ $url =~ ^https?://[a-zA-Z0-9./?=_-]+$ ]]; then
    print_error "Invalid URL: $url"
  fi
}

validate_path() {
  local path="$1"
  if ! [ -e "$path" ]; then
    print_error "Invalid path: $path"
  fi
}


# -- User Confirmation for Ooverwriting.
confirm_overwrite() {
  local dir="$1"
  read -p "Directory $dir already exists. Overwrite? [y/N] " -n 1 -r
  echo
  if [[ ! $REPLY =~ ^[Yy]$ ]]; then
    print_error "User aborted the operation."
  fi
}


# -- Default values.

extra_nativefier_opts=""


# -- Parse arguments.

while :; do
  case $1 in
    -h|--help)
      show_help
      exit
      ;;
    -v|--version)
      show_version
      exit
      ;;
    --name)
      if [ -n "$2" ]; then
        name=$2
        shift
      else
        print_error "--name requires a non-empty option argument."
      fi
      ;;
    --url)
      if [ -n "$2" ]; then
        url=$2
        shift
      else
        print_error "--url requires a non-empty option argument."
      fi
      ;;
    --icon)
      if [ -n "$2" ]; then
        icon=$2
        shift
      else
        print_error "--icon requires a non-empty option argument."
      fi
      ;;
    --extra)
      if [ -n "$2" ]; then
        extra_nativefier_opts=$2
        shift
      else
        print_error "--extra requires a non-empty option argument."
      fi
      ;;
    --)
      shift
      break
      ;;
    *)
      break
  esac
  shift
done


# -- Validate required arguments.

[ -z "${name:-}" ] && print_error "Missing required argument: --name"
[ -z "${url:-}" ] && print_error "Missing required argument: --url"
[ -z "${icon:-}" ] && print_error "Missing required argument: --icon"


# -- Check for dependencies.

command -v npx >/dev/null 2>&1 || print_error "npx command not found. Please install it."
command -v wget >/dev/null 2>&1 || print_error "wget command not found. Please install it."


# -- Function to download or copy icon.

process_icon() {
  local icon_path="$1"
  local icon_name
  icon_name=$(basename "$icon_path" | cut -d '?' -f 1) || print_error "Failed to process icon name from $icon_path"

  if [[ "$icon_path" = http* ]]; then
    echo "Downloading $icon_name from $icon_path"
    wget -q -O "$icon_name" "$icon_path" || print_error "Failed to download icon from $icon_path"
  elif [ -e "$icon_path" ]; then
    echo "Copying $icon_name from $icon_path"
    cp "$icon_path" "./$icon_name" || print_error "Failed to copy icon from $icon_path"
  else
    print_error "Invalid icon URL/path. Please provide a valid HTTP link or a local path."
  fi
}


# -- Function to create desktop entry and AppRun script.

create_desktop_entry() {
  local app_name="$1"
  local icon_name="$2"

  {
    echo "[Desktop Entry]"
    echo "Name=$app_name"
    echo "Exec=AppRun %U"
    echo "Terminal=false"
    echo "Type=Application"
    echo "Icon=${icon_name%.*}"
    echo "X-AppImage-Version=1.0.0"
    echo "Categories=Utility;"
  } > "$app_name.desktop"

  {
    echo "#!/bin/bash"
    echo "exec \$APPDIR/$app_name"
  } > AppRun
  chmod +x ./AppRun
}


# -- Check for existing AppDir and create AppImage.

create_appimage() {
  local app_name="$1"
  local app_url="$2"
  local icon_path="$3"
  local extra_nativefier_opts="$4"

  if [ -d "$app_name.AppDir" ]; then
    echo "WARNING: \`$app_name.AppDir\` directory already exists."
    confirm_overwrite "$app_name.AppDir"
  else
    npx nativefier -n "$app_name" -p linux "$app_url" "${extra_nativefier_opts[@]}" || print_error "Failed to create AppDir with nativefier."
    mv "$app_name"-linux-* "$app_name.AppDir" || print_error "Failed to move AppDir."
  fi

  cd "$app_name.AppDir/" || print_error "Failed to change directory to $app_name.AppDir."

  process_icon "$icon_path"
  create_desktop_entry "$app_name" "$(basename "$icon_path" | cut -d '?' -f 1)"

  if [ ! -e /tmp/appimagetool ]; then
    echo "Downloading appimagetool..."
    wget -O /tmp/appimagetool "https://github.com/AppImage/AppImageKit/releases/download/continuous/appimagetool-x86_64.AppImage" \
      || print_error "Failed to download appimagetool."
    chmod +x /tmp/appimagetool
  fi

  /tmp/appimagetool "$app_name.AppDir" || print_error "Failed to create AppImage."

  echo "Removing temporary AppDir..."
  cd .. || print_error "Failed to change directory for AppDir removal."
  rm -rf "$app_name.AppDir" || print_error "Failed to remove AppDir."
}


# -- Main execution.

create_appimage "$name" "$url" "$icon" "$extra_nativefier_opts"
